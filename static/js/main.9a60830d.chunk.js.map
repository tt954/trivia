{"version":3,"sources":["components/QuestionCard.js","components/LandingPage.js","components/GameOver.js","API.js","utils.js","App.js","index.js"],"names":["QuestionCard","props","question","answers","checkAnswer","userAnswer","questionNumber","totalQuestions","score","className","dangerouslySetInnerHTML","__html","map","answer","correct","correctAnswer","userClicked","disabled","value","onClick","LandingPage","setDifficulty","start","_onFocus","e","target","classList","toggle","_onBlur","difficulty","onFocus","onBlur","GameOver","userAnswers","restart","idx","fetchQuestions","amount","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","landing","setLanding","loading","setLoading","questions","setQuestions","setUserAnswers","number","setNumber","setScore","gameOver","setGameOver","newQuestions","nextQuestion","title","undefined","currentTarget","prev","answerObject","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a60830d.chunk.js","sourcesContent":["import React from 'react';\n\nconst QuestionCard = props => {\n  const { \n    question, \n    answers, \n    checkAnswer, \n    userAnswer, \n    questionNumber, \n    totalQuestions, \n    score } = props;\n  \n  return (\n    <div className=\"question-card\">\n\n      <p className=\"question-number\">Question: {questionNumber} / {totalQuestions}</p>  \n\n      <p className=\"score\">Score: <span>{score}</span></p>\n\n      <p className=\"question\" dangerouslySetInnerHTML={{ __html: question }} />\n      \n      <div className=\"choices\">\n        {answers.map(answer => {\n          const correct = userAnswer ? userAnswer.correctAnswer === answer : false;\n          const userClicked = userAnswer ? userAnswer.answer === answer : false;\n\n          return (\n            <button \n              key={answer} \n              className={`answer-wrapper\n                ${correct ? \"correct\" : \"incorrect\"}\n                ${userClicked? \"clicked\" : \"notclicked\"}`}\n              disabled={userAnswer ? true : false}\n              value={answer} \n              onClick={checkAnswer}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n            </button>\n        )})}\n      </div>\n\n    </div>\n  )\n}\n\nexport default QuestionCard;","import React from 'react';\n\nconst LandingPage = props => {\n  const { setDifficulty, start } = props;\n  const difficulties = [\"easy\", \"medium\", \"hard\"];\n\n  const _onFocus = e => {\n    e.target.classList.toggle(\"clicked-diff\")\n    setDifficulty(e.target.value);\n  }\n\n  const _onBlur = e => {\n    e.target.classList.toggle(\"clicked-diff\");\n  }\n\n  return (\n    <>\n      <p>Choose a difficulty:</p>\n      <div className=\"difficulty\">\n        {difficulties.map(difficulty => (\n          <button \n            className=\"diff-btn\"\n            value={difficulty} \n            onFocus={_onFocus}\n            onBlur={_onBlur}>\n              {difficulty}\n          </button>\n        ))}\n      </div>\n\n      <button className=\"start action-btn\" onClick={start}>Start Game</button>\n    </>\n  );\n}\n\nexport default LandingPage;","import React from 'react';\n\nconst GameOver = props => {\n  const { score, userAnswers, restart } =  props;\n  \n\n  return (\n    <div>\n      <h2>Game Over</h2>\n      <p>Final Score: {score}</p>\n      <button className=\"action-btn\" onClick={restart}>Try Again</button>\n\n      <ol className=\"question-list\">\n        {userAnswers.map((question, idx) => {\n          const userAnswer = !question.correct ? question.answer : null;\n          return (\n            <li key={idx}>\n              <p dangerouslySetInnerHTML={{ __html: question.question }}></p>\n              <div className=\"ql-answers\">\n                <p className=\"cr\" dangerouslySetInnerHTML={{ __html: question.correctAnswer }}></p>\n                <p className=\"icr\" dangerouslySetInnerHTML={{ __html: userAnswer }}></p>\n              </div>\n            </li>\n          )\n        })}\n      </ol>\n\n    </div>\n  )\n}\n\nexport default GameOver;","import { shuffleArray } from './utils';\n\nexport const fetchQuestions = async (amount, difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map(question => (\n    {\n      ...question,\n      answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\n    }\n  ));\n}","export const shuffleArray = array => \n  [...array].sort(() => Math.random() - 0.5);","import React, { useState } from 'react';\nimport './styles.css';\n\n// Components\nimport QuestionCard from './components/QuestionCard';\nimport LandingPage from './components/LandingPage';\nimport GameOver from './components/GameOver';\n\nimport { fetchQuestions } from './API';\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [landing, setLanding] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n\n  // Start game\n  const start = async () => {\n    setLanding(false);\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS, \n      difficulty\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  // Restart game, take user back to landing page\n  const restart = () => { \n    setLanding(true); \n  }\n\n  const checkAnswer = e => {\n    const answer = e.currentTarget.value;\n    const correct = questions[number].correct_answer === answer;\n    if (correct) setScore(prev => prev + 1);\n\n    // Set up answer object to update userAnswers array\n    const answerObject = {\n      question: questions[number].question,\n      answer, \n      correct, \n      correctAnswer: questions[number].correct_answer,\n    };\n    setUserAnswers(prev => [...prev, answerObject]);\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Restart available only when not on landing page */}\n      {!landing && \n        <button \n          className=\"restart\" \n          title=\"Restart\" \n          onClick={restart}>\n            &#10006;\n        </button>}\n\n      <h1 className=\"title fl\">Trivia</h1>\n\n      {landing && \n        <LandingPage \n          setDifficulty={setDifficulty}\n          start={start}\n        />}\n\n      {/* When questions are loading  */}\n      {loading && <p>Loading questions...</p>}\n      \n      {/* When questions are not loading and game is not over */}\n      {!loading && !gameOver && !landing && \n        <QuestionCard \n          questionNumber={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          checkAnswer={checkAnswer}\n          score={score}\n          nextQuestion={nextQuestion}\n        />}\n\n      {/* Next button available only when user has chosen an answer (increasing userAnswers length) */}\n      {!landing && !loading && !gameOver && userAnswers.length === number + 1 &&\n        <button className=\"next action-btn\" onClick={nextQuestion}>Next</button>}\n\n      {gameOver && !landing &&\n        <GameOver \n          score={score}\n          userAnswers={userAnswers}\n          restart={restart}\n        />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}